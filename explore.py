"""
This module provides the Explorer class, to process and visualize data.

In addition, it provides a handful of functions to manipulate the data
that can be returned by an Explorer object.

(It contains the following functions, each with their own documentation:)

    explore     Plot and/or read the data from a file. This is basically
                a combination of the functions `read`, `get` and `plot`.
    read        Read the data from the file into a DataFrame.
    get         Extract specific variables from a DataFrame
                into Quantity objects.
    plot        (Sub)plot one or several Quantity objects.
    thermocal   Compute heat transfer from flowrate, pressure and
                temperatures.
    plot_files  Plot a quantity for several files to allow comparison.
"""

import platform
from os.path import split, splitext
from tkinter import Tk
from tkinter.filedialog import askopenfilename, askopenfilenames
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from xpint import UnitRegistry


class Explorer():
    """
    Process and visualize data based on files generated by the DataTaker.

    An Explorer object holds information about data contained in a file
    from the DataTaker (csv or excel). The filename must be passed to the
    constructor. Moreover, an Explorer has several methods to plot and/or
    return the data. The latter can be useful to perform calculations
    that are not implemented in the Explorer class.
    
    Parameters
    ----------
    filename : str
        The name of the DataTaker file (.csv or .xlsx) to read.

    Attributes
    ----------
    read_file : str
        The name of the DataTaker file that was read by the Explorer.
    """

    def __init__(self, filename=None):
        self.read(filename) # assigns raw_data attribute
        self.read_file = filename
        self._build_name_converter() # assigns _name_converter attribute

    def read(self, filename=None, initialdir='./heating-data'):
        """
        Read a DataTaker file and assign it to the raw_data attribute.

        Paramters
        ---------
        filename : str, optional
            The name of the file to read. If None is given, a dialog box
            will open to select the file. Valid extensions are csv (.csv)
            and excel (.xslx).
        initialdir : str, default './Heating data'
            a string with the path of the directory in which the dialog
            box will open if no filename is specified.

        """

        if filename is None:
            Tk().withdraw()  # remove tk window

            # Open dialog window in initialdir
            filetypes=(('All files', '.*'),
                       ('CSV', '.csv'),
                       ('Excel', '.xlsx')
                      )
            filename = askopenfilename(initialdir=initialdir,
                                       title='Select input file',
                                       filetypes=filetypes)

        # return if the Cancel button is pressed
        if filename in ((), ''): 
            return None if not get_time else None, None
        
        # Get the file type from the extension
        _, ext = splitext(filename) 
        if ext.lower() == '.csv':
            filetype = 'csv'
        elif ext.lower() == '.xlsx':
            filetype = 'excel'
        else:
            raise ValueError('invalid file extension')

        # Define the reader function according to the file type 
        call = 'read_' + filetype

        # Read the first line of the file
        raw_data = getattr(pd, call)(filename, nrows=0)
        
        # Fetch the data
        if any( word in list(raw_data)[0] for word in
               ['load', 'aux', 'setpoint', '|', 'PdT'] ):

            # Print the test conditions
            print('Test conditions :', list(raw_data)[0])

            # Skip the first row containing the conditions
            self.raw_data = getattr(pd, call)(filename, skiprows=1)

        else:
            self.raw_data = getattr(pd, call)(filename)

    def _build_name_converter(self, filename='name_conversions.txt'):

        # Read the label conversion table differently according to the OS
        if platform.system() == 'Linux':
            nconv = pd.read_fwf(filename, comment='#',
                                widths=[12, 36, 20, 20, 5], index_col=0)
        else:
            nconv = pd.read_csv(filename, delimiter='\t+',
                            index_col=0, engine='python', comment='#')
            nconv_cols = nconv.loc[:, 'col_names'].str.replace('Â', '');
            nconv_units = nconv.loc[:, 'units'].str.replace('Â', '');
            nconv.loc[:, 'col_names'] = nconv_cols 
            nconv.loc[:, 'units'] = nconv_units 

        nconv[nconv=='-'] = None
        self._name_converter = nconv
